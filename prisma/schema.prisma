// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model EurovisionYear {
    year Int @id

    items EurovisionGroup[]
}

model EurovisionGroup {
    id String @id @default(cuid())

    year   EurovisionYear @relation(fields: [yearId], references: [year])
    yearId Int

    name    String
    type    EurovisionType
    enabled Boolean        @default(true)

    items    SongItem[]
    rankings UserRanking[]
}

enum EurovisionType {
    ALL_SONGS
    GRAND_FINAL
    SEMI_1
    SEMI_2
    NATIONAL_FINAL
    GROUP
}

model SongItem {
    id String @id @default(cuid())

    artist String
    title  String

    country   Country @relation(fields: [countryId], references: [id])
    countryId String

    youtubeURL String  @db.Text()
    previewURL String? @db.Text()
    artworkURL String? @db.Text()

    groups   EurovisionGroup[]
    rankings RankedSong[]
}

model UserRanking {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    group   EurovisionGroup @relation(fields: [groupId], references: [id])
    groupId String

    rankedSongs RankedSong[]
}

model RankedSong {
    id String @id @default(cuid())

    rank Int

    song   SongItem @relation(fields: [songId], references: [id])
    songId String

    ranking   UserRanking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
    rankingId String
}

model Country {
    id       String @id @default(cuid())
    fullname String
    isoCode  String @default("")

    items SongItem[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts Account[]
    sessions Session[]
    rankings UserRanking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}
