// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model EurovisionYear {
    year Int @id

    items EurovisionRankable[]
}

model EurovisionRankable {
    id String @id @default(cuid())

    year               EurovisionYear @relation(fields: [eurovisionYearYear], references: [year])
    eurovisionYearYear Int

    name String
    type EurovisionType

    items RankableItem[]
}

enum EurovisionType {
    GRAND_FINAL
    SEMI_1
    SEMI_2
    NATIONAL_FINAL
}

model RankableItem {
    id String @id @default(cuid())

    artist  String
    title   String
    country Country @relation(fields: [countryId], references: [id])

    youtubeURL String  @db.Text()
    previewURL String? @db.Text()
    countryId  String

    rank RankedItem[]

    group   EurovisionRankable? @relation(fields: [groupId], references: [id])
    groupId String?
}

model RankedItem {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    item           RankableItem @relation(fields: [rankableItemId], references: [id])
    rankableItemId String

    rank Int?
}

model Country {
    id       String @id @default(cuid())
    fullname String

    items RankableItem[]
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts    Account[]
    sessions    Session[]
    rankedItems RankedItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}
